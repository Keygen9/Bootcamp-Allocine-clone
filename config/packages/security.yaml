security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true   

    password_hashers:
        # Pour notre class User
        App\Entity\User:
            # On utilise le meilleur algo présent sur la machine
            algorithm: auto
            
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern:   ^/api
            stateless: true
            jwt: ~
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
            json_login:
                check_path: /api/login


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
    #JWT
        # - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
    #routes API
        - { path: ^/api/movies, roles: ROLE_ADMIN, methods: [POST] }

    #routes front
        - { path: ^/movie/\d+/add/review, roles: ROLE_USER }
        - { path: ^/back/(movie|job)/(browse|read), roles: ROLE_MANAGER }
        - { path: ^/back, roles: ROLE_ADMIN }

    # https://symfony.com/doc/current/security.html#hierarchical-roles
    role_hierarchy:
        # ROLE_ADMIN hérite de ROLE_MANAGER
        ROLE_ADMIN: ROLE_MANAGER
        # Si on souhaite que les MANAGER et ADMIN se comportent comme un USER sur le front
        ROLE_MANAGER: ROLE_USER
        # C'est en cascade, donc ROLE_ADMIN => ROLE_USER aussi